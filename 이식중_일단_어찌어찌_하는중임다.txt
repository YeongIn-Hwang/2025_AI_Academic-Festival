
fetch_trusted_places : 종합적으로 정보를 얻는 코드 {
	compute_review_weight_log : 리뷰들을 받아서 리뷰 개수에 따라 log를 적용해서 점수 계산의 일부 값을 반환
	compute_trust_score : 리뷰와 별점 등을 종합하여 신뢰점수 계산
	get_reviews_and_business_info : 비즈니스(사업) 시간, 리뷰 등 내용 가져옴
	search_places_basic : Google place API로 지역 정보 얻음
}

->

add_review_vectors_to_places : 모든 지역에 대해 리뷰와 이름을 임베딩 하는 코드 {
	get_place_vector_with_name : 이름과 리뷰로 임베딩 하는 코드 {
		clean_reviews_in_places :  전체적 place들의 리뷰를 전처리해주는 코드 {
		clean_review : 리뷰 전저치하는 코드
		}
	->
		get_sbert_review_vector : 리뷰마다 5개의 임베딩을 처리하고 그 평균으로 해당 장소의 평균 벡터를 준비 {
		get_sbert_embedding : 리뷰를 임베딩 하는 코드
		}
	}
}

->

add_hope_scores_to_places : 모든 지역에 대해 실행 {
	compute_hope_score : 희망 키워드 벡터랑 리뷰 임베딩 벡터 코사인 유사도 계산
}
add_nonhope_scores_to_places : 모든 지역에 대해 실행 {
	update_user_nonhope_vector : 비희망 키워드의 유사도 계산
}

->

save_places_as_json : 임베딩 까지 끝난 지역들 정보 저장 {
	convert_place_for_json : 사전 작업
}

#############################################################################################
여까지함
#############################################################################################

class ScheduleItem:
    def __init__(self, title, start, end, place_type, location_info=None):
        self.title = title #지역 이름
        self.start = start  # 시작시간
        self.end = end      # 종료시간
        self.place_type = place_type #명소, 카페, 
        self.location_info = location_info  #위도, 경도

->

generate_empty_slots : 시간을 입력받아 빈 시간 간격을 찾고 쪼갬, 날짜별로 생성 {
	split_empty_range : 빈 시간 간격을 쪼갬
}

->

insert_initial_schedule_items_dynamic : 빈 테이블의 틀 생성 {
	create_empty_daily_tables : 빈 테이블의 필수 정보들을 형성하며 필수 지역의 위치정보 가져옴
	place_location_info : 지역 이름이 주어졌을때, 해당 지역의 위치정보와 이름을 반환
}

->

dqn_fill_schedule : 종합적인 테이블 생성기 {
	compute_future_reward : 미래 가치 점수 계산 {
		compute_total_score : 가치 함수 계산 {
			get_constraints : 제약조건 반환
			get_elapsed_minutes_since_last_type : 인덱스 기준으로 지난 타입으로부터의 최대 시간을 반환 {
				time_diff_minutes : 분단위 시간 차이 계산
			}
			euclidean : 유클리드 거리 계산
			compute_distance : 거리 계산

			+

			get_valid_candidates : 그 시각대에 가능한 지역인지 확인하는 함수 {
				is_place_open_during_slot : 열었는지 판단하는 함수 {
					parse_korean_time : 가능 시간 파악 함수
				}
			}

			+

			get_user_params : 사용자 parameter를 받아오는 함수
		}
	}
}


API_KEY = "AIzaSyBEl50H0xV7SnyNwcc0Yo-Ru-iiTXTBePc"

PLACE_TYPES = [
    "tourist_attraction",
    "cafe",
    "bar",
    "bakery",
    "restaurant",
    "shopping_mall",
]

title 입력
query 입력
method 입력

all_places = fetch_trusted_places(query, method, API_KEY, PLACE_TYPES)
all_places = clean_reviews_in_places(all_places)
all_places = add_review_vectors_to_places(all_places, model)
keyword_hope = [clean_keyword(r) for r in keyword_hope if r]
keyword_nonhope = [clean_keyword(r) for r in keyword_nonhope if r]
all_places = add_hope_scores_to_places(all_places, user_params, user_id, model)
all_places = add_nonhope_scores_to_places(all_places, user_params, user_id, model)

save_places_as_json(all_places,user_id,title)

이렇게 진행되야해.
