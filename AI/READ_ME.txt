PLACE_TYPES = [
    "tourist_attraction",  # 핵심 명소
    "cafe",                # 카페
    "bar",                 # 바
    "bakery",              # 베이커리
    "restaurant",          # 맛집
    "shopping_mall",       # 쇼핑
]

** 지금 API 사용량 문제 때문에 가능하면 PIP만 깔고! <- 안깔면 실행 안될겁니다.
import json
with open("all_places.json", "r", encoding="utf-8") as f:
    all_places = json.load(f)
이 코드 부터 실행하기.

작업 매커니즘
1. 사용자가 지역 입력하고 이동 방식 입력하면 그에따라 구글 플레이스에서 주변 명소, 음식점, 카페, 쇼핑 몰 등의 리스트를 40개 까지 가져온다. (평점 3.5, 리뷰 수 1개 이상 지역으로 제한)
: 너무 의미없는 지역은 목록에서 아예 제외하고자 해당 조건을 사용하였다.

2. 해당 지역의 리뷰를 가져와 전처리후 임베딩 하여 특징 벡터를 추출하고 해당 특징 벡터 정보도 함께 저장한다. 
: 이때 지역 이름도 같이 임베딩 해서 넣음 (이름은 지역의 특성을 가진다고 판단하기 때문)

3. 사용자 희망 사항을 입력 받아 특징벡터로 변환시킨다.
: 이때 입력 사항은 선호지역 예시가 들어갈 수록, 희망하는 파트를 말할 수록 선출하는 지역 리스트가 자세하고 유용해진다.

4. 사용자 벡터와 지역 벡터간의 코사인 유사도를 계산하고, 별점, 리뷰 수를 통해 최종 점수를 산출, 각각 가져온 리스트를 최종 점수 순으로 나열 시킨다. (여행 경로 짤 때의 기반 요소)

앞으로 진행 예정

1. 위치 정보 가져온 곳을 기반으로 클러스터링을 진행하고 여행 군집을 만들어 여행 경로를 만들 시도를 해본다.
(자세하겐 아직 어떻게 할지 모르겠지만 GPT API를 쓰거나, 아니면 호텔 등의 정보를 기반으로 짧은 경로 우선해서 추천하는 등 여러 방법을 고안해 봐야 할것 같다.
! 중요 !
추천 시스템 알고리즘 중 경로 추천 시스템 관해서 조사해볼 필요가 있다. 제대로 된 예시가 있을려나? + 클러스터링 할때 우선적 클러스터를 어떻게 찾을까?
지금 시점에서는 추천 지역을 선정하는 것은 했고.. 거기서의 점수를 기반으로 우선적인 클러스터 등을 선정? 내부에서의 지역 탐색을 시도해 보아야 하나?

0708
KoBERT 에서 KoSBERT로 변화
 : 의미 유사도 기반에 특화된 토크나이저를 사용하고자 해당 모델로 변화시켰다. < 근데 조정이 좀 필요할듯 하다. 더 좋은 모델이나 전체적인 의미를 보는 임베딩은 없나? RNN을 쓰거나 Transformer를 쓰면?
사용자 희망 입력시에는 하기싫은게 아닌 하고 싶은걸 입력받아야 함 + 예시 장소 정보가 같이 들어가면 더 좋은 결과를 내놓는다.
 : 유사도 평가할때 그나마라도 유사한 곳을 얻을 수 있음

문제 : 임베딩을 통한 의미 해석에 아직 문제가 있다.

0709
경로 생성을 일단 GPT API 안써보고 가치함수 기준으로 하게끔 작성해봤습니다.
알고리즘과 구조는 다음과 같습니다.

AI는 안쓰고 규칙기반으로 작성하였습니다.
이유 : 후보군이 너무 많기에 강화학습으로 처리할 시 너무 비효율적이라 판단되었기 때문입니다.
게다가 지역마다 후보군이 달라지기에 매번 다시 학습을 해야하는데 너무 불필요하다 생각됩니다.

기본적으로 시간표 처럼 10시부터 22시까지의 일정을 1시간 30분 기준으로 나누어 결정합니다.
모든 장소의 후보군은 이전 단계에서 찾은 후보군의 Top 20만큼 자른 것으로 기존 최초 후보군의 0.5배수 입니다.
모든 일정의 결정은 그 0.5배수 내에서 이루어집니다.

간단하게는 다음과 같이 처리합니다.

1. 매 시간의 일정을 생성할 때, 어떤 타입을 허용할지 판단합니다.
예) 식당 -> 식당 같은 것은 방지하고자 제약조건들을 설정하였습니다.

2. 허용되는 타입의 후보군 들 중 10곳을 선발합니다. 선발기준은 유클리드 거리 기반입니다.

3. 해당 과정을 매 타임라인마다 3차례의 미래까지 가치판단을 처리합니다.
가치는 이전 점수와 거리등이 복합적으로 작용한 점수입니다.

이게 뭐라 적어야 될지 햇갈려서 그러는데, DQN 방식을 기반으로 지금 시점에서 최대 3단계 미래 시점까지의 가치를 계산, 가장 높은 가치의 경로를 향한 다음 선택을 하는 방식입니다.
본래 DQN의 경우 미래 시점을 무한에 가깝게 가치를 계산하지만 계산량과 시간 문제로 3회로 제한하였습니다.

-------------------------------------------------------------------------------------------------------------------------------
키워드 기반으로 바꿔보고 있는데, 지금 키워드 별 클러스터 만들어서 해보려고 시도중입니다.